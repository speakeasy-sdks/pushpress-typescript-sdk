/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  AppointmentCheckin: "AppointmentCheckin",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type AppointmentCheckin = {
  /**
   * Unique identifier for the checkin
   */
  id: string;
  /**
   * Name of the checked-in appointment
   */
  name: string;
  type: Type;
  /**
   * Type of the appointment
   */
  appointmentType: string;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const AppointmentCheckin$inboundSchema: z.ZodType<
  AppointmentCheckin,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: Type$inboundSchema,
  appointmentType: z.string(),
});

/** @internal */
export type AppointmentCheckin$Outbound = {
  id: string;
  name: string;
  type: string;
  appointmentType: string;
};

/** @internal */
export const AppointmentCheckin$outboundSchema: z.ZodType<
  AppointmentCheckin$Outbound,
  z.ZodTypeDef,
  AppointmentCheckin
> = z.object({
  id: z.string(),
  name: z.string(),
  type: Type$outboundSchema,
  appointmentType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppointmentCheckin$ {
  /** @deprecated use `AppointmentCheckin$inboundSchema` instead. */
  export const inboundSchema = AppointmentCheckin$inboundSchema;
  /** @deprecated use `AppointmentCheckin$outboundSchema` instead. */
  export const outboundSchema = AppointmentCheckin$outboundSchema;
  /** @deprecated use `AppointmentCheckin$Outbound` instead. */
  export type Outbound = AppointmentCheckin$Outbound;
}

export function appointmentCheckinToJSON(
  appointmentCheckin: AppointmentCheckin,
): string {
  return JSON.stringify(
    AppointmentCheckin$outboundSchema.parse(appointmentCheckin),
  );
}

export function appointmentCheckinFromJSON(
  jsonString: string,
): SafeParseResult<AppointmentCheckin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppointmentCheckin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppointmentCheckin' from JSON`,
  );
}
