/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppointmentCheckin,
  AppointmentCheckin$inboundSchema,
  AppointmentCheckin$Outbound,
  AppointmentCheckin$outboundSchema,
} from "./appointmentcheckin.js";
import {
  ClassCheckin,
  ClassCheckin$inboundSchema,
  ClassCheckin$Outbound,
  ClassCheckin$outboundSchema,
} from "./classcheckin.js";
import {
  EventCheckin,
  EventCheckin$inboundSchema,
  EventCheckin$Outbound,
  EventCheckin$outboundSchema,
} from "./eventcheckin.js";

/**
 * Type of the check-in
 */
export type Details =
  | (EventCheckin & { type: "EventCheckin" })
  | (AppointmentCheckin & { type: "AppointmentCheckin" })
  | (ClassCheckin & { type: "ClassCheckin" });

export type Checkin = {
  /**
   * Type of the check-in
   */
  details:
    | (EventCheckin & { type: "EventCheckin" })
    | (AppointmentCheckin & { type: "AppointmentCheckin" })
    | (ClassCheckin & { type: "ClassCheckin" });
  /**
   * Check-in time in Unix timestamp
   */
  checkinTime: number;
  /**
   * Customer ID for the check-in
   */
  customer: string;
  /**
   * Company ID for the check-in
   */
  company: string;
  /**
   * Name of the thing being checked in
   */
  name: string;
};

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.union([
    EventCheckin$inboundSchema.and(
      z.object({ type: z.literal("EventCheckin") }).transform((v) => ({
        type: v.type,
      })),
    ),
    AppointmentCheckin$inboundSchema.and(
      z.object({ type: z.literal("AppointmentCheckin") }).transform((v) => ({
        type: v.type,
      })),
    ),
    ClassCheckin$inboundSchema.and(
      z.object({ type: z.literal("ClassCheckin") }).transform((v) => ({
        type: v.type,
      })),
    ),
  ]);

/** @internal */
export type Details$Outbound =
  | (EventCheckin$Outbound & { type: "EventCheckin" })
  | (AppointmentCheckin$Outbound & { type: "AppointmentCheckin" })
  | (ClassCheckin$Outbound & { type: "ClassCheckin" });

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.union([
  EventCheckin$outboundSchema.and(
    z.object({ type: z.literal("EventCheckin") }).transform((v) => ({
      type: v.type,
    })),
  ),
  AppointmentCheckin$outboundSchema.and(
    z.object({ type: z.literal("AppointmentCheckin") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ClassCheckin$outboundSchema.and(
    z.object({ type: z.literal("ClassCheckin") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const Checkin$inboundSchema: z.ZodType<Checkin, z.ZodTypeDef, unknown> =
  z.object({
    details: z.union([
      EventCheckin$inboundSchema.and(
        z.object({ type: z.literal("EventCheckin") }).transform((v) => ({
          type: v.type,
        })),
      ),
      AppointmentCheckin$inboundSchema.and(
        z.object({ type: z.literal("AppointmentCheckin") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ClassCheckin$inboundSchema.and(
        z.object({ type: z.literal("ClassCheckin") }).transform((v) => ({
          type: v.type,
        })),
      ),
    ]),
    checkinTime: z.number().int(),
    customer: z.string(),
    company: z.string(),
    name: z.string(),
  });

/** @internal */
export type Checkin$Outbound = {
  details:
    | (EventCheckin$Outbound & { type: "EventCheckin" })
    | (AppointmentCheckin$Outbound & { type: "AppointmentCheckin" })
    | (ClassCheckin$Outbound & { type: "ClassCheckin" });
  checkinTime: number;
  customer: string;
  company: string;
  name: string;
};

/** @internal */
export const Checkin$outboundSchema: z.ZodType<
  Checkin$Outbound,
  z.ZodTypeDef,
  Checkin
> = z.object({
  details: z.union([
    EventCheckin$outboundSchema.and(
      z.object({ type: z.literal("EventCheckin") }).transform((v) => ({
        type: v.type,
      })),
    ),
    AppointmentCheckin$outboundSchema.and(
      z.object({ type: z.literal("AppointmentCheckin") }).transform((v) => ({
        type: v.type,
      })),
    ),
    ClassCheckin$outboundSchema.and(
      z.object({ type: z.literal("ClassCheckin") }).transform((v) => ({
        type: v.type,
      })),
    ),
  ]),
  checkinTime: z.number().int(),
  customer: z.string(),
  company: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Checkin$ {
  /** @deprecated use `Checkin$inboundSchema` instead. */
  export const inboundSchema = Checkin$inboundSchema;
  /** @deprecated use `Checkin$outboundSchema` instead. */
  export const outboundSchema = Checkin$outboundSchema;
  /** @deprecated use `Checkin$Outbound` instead. */
  export type Outbound = Checkin$Outbound;
}

export function checkinToJSON(checkin: Checkin): string {
  return JSON.stringify(Checkin$outboundSchema.parse(checkin));
}

export function checkinFromJSON(
  jsonString: string,
): SafeParseResult<Checkin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Checkin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Checkin' from JSON`,
  );
}
