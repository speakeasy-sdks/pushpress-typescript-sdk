/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AppInstall = {
  /**
   * Unique identifier for the app install
   */
  id: string;
  /**
   * Unique identifier for the app
   */
  app: string;
  /**
   * Unique identifier for the client
   */
  company: string;
  /**
   * Status of the app install
   */
  status: string;
  /**
   * Timestamp when the app was installed
   */
  installed: Date;
  /**
   * Timestamp when the app was uninstalled (nullable)
   */
  uninstalled?: Date | undefined;
};

/** @internal */
export const AppInstall$inboundSchema: z.ZodType<
  AppInstall,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  app: z.string(),
  company: z.string(),
  status: z.string(),
  installed: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  uninstalled: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type AppInstall$Outbound = {
  id: string;
  app: string;
  company: string;
  status: string;
  installed: string;
  uninstalled?: string | undefined;
};

/** @internal */
export const AppInstall$outboundSchema: z.ZodType<
  AppInstall$Outbound,
  z.ZodTypeDef,
  AppInstall
> = z.object({
  id: z.string(),
  app: z.string(),
  company: z.string(),
  status: z.string(),
  installed: z.date().transform(v => v.toISOString()),
  uninstalled: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppInstall$ {
  /** @deprecated use `AppInstall$inboundSchema` instead. */
  export const inboundSchema = AppInstall$inboundSchema;
  /** @deprecated use `AppInstall$outboundSchema` instead. */
  export const outboundSchema = AppInstall$outboundSchema;
  /** @deprecated use `AppInstall$Outbound` instead. */
  export type Outbound = AppInstall$Outbound;
}

export function appInstallToJSON(appInstall: AppInstall): string {
  return JSON.stringify(AppInstall$outboundSchema.parse(appInstall));
}

export function appInstallFromJSON(
  jsonString: string,
): SafeParseResult<AppInstall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppInstall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppInstall' from JSON`,
  );
}
