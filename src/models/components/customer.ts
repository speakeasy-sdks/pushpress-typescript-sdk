/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Schema representing a customer, former customer or lead served by Company
 */
export type Customer = {
  /**
   * Unique identifier for the customer
   */
  id: string;
  /**
   * Name of the customer
   */
  name?: string | undefined;
  /**
   * Address of the customer
   */
  address?: string | undefined;
  /**
   * URL to the profile image of the customer
   */
  profileImage?: string | undefined;
  /**
   * Email address of the customer
   */
  email: string;
  /**
   * Phone number of the customer
   */
  phone?: string | undefined;
};

/** @internal */
export const Customer$inboundSchema: z.ZodType<
  Customer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  address: z.string().optional(),
  profileImage: z.string().optional(),
  email: z.string(),
  phone: z.string().optional(),
});

/** @internal */
export type Customer$Outbound = {
  id: string;
  name?: string | undefined;
  address?: string | undefined;
  profileImage?: string | undefined;
  email: string;
  phone?: string | undefined;
};

/** @internal */
export const Customer$outboundSchema: z.ZodType<
  Customer$Outbound,
  z.ZodTypeDef,
  Customer
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  address: z.string().optional(),
  profileImage: z.string().optional(),
  email: z.string(),
  phone: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customer$ {
  /** @deprecated use `Customer$inboundSchema` instead. */
  export const inboundSchema = Customer$inboundSchema;
  /** @deprecated use `Customer$outboundSchema` instead. */
  export const outboundSchema = Customer$outboundSchema;
  /** @deprecated use `Customer$Outbound` instead. */
  export type Outbound = Customer$Outbound;
}

export function customerToJSON(customer: Customer): string {
  return JSON.stringify(Customer$outboundSchema.parse(customer));
}

export function customerFromJSON(
  jsonString: string,
): SafeParseResult<Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customer' from JSON`,
  );
}
