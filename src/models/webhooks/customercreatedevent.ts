/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const EventType = {
  Created: "created",
} as const;
export type EventType = ClosedEnum<typeof EventType>;

export type CustomerCreatedEventRequestBody = {
  /**
   * Schema representing a customer, former customer or lead served by Company
   */
  data?: components.Customer | undefined;
  /**
   * Unix timestamp of the creation event
   */
  created?: number | undefined;
  eventType?: EventType | undefined;
};

/** @internal */
export const EventType$inboundSchema: z.ZodNativeEnum<typeof EventType> = z
  .nativeEnum(EventType);

/** @internal */
export const EventType$outboundSchema: z.ZodNativeEnum<typeof EventType> =
  EventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventType$ {
  /** @deprecated use `EventType$inboundSchema` instead. */
  export const inboundSchema = EventType$inboundSchema;
  /** @deprecated use `EventType$outboundSchema` instead. */
  export const outboundSchema = EventType$outboundSchema;
}

/** @internal */
export const CustomerCreatedEventRequestBody$inboundSchema: z.ZodType<
  CustomerCreatedEventRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.Customer$inboundSchema.optional(),
  created: z.number().int().optional(),
  eventType: EventType$inboundSchema.optional(),
});

/** @internal */
export type CustomerCreatedEventRequestBody$Outbound = {
  data?: components.Customer$Outbound | undefined;
  created?: number | undefined;
  eventType?: string | undefined;
};

/** @internal */
export const CustomerCreatedEventRequestBody$outboundSchema: z.ZodType<
  CustomerCreatedEventRequestBody$Outbound,
  z.ZodTypeDef,
  CustomerCreatedEventRequestBody
> = z.object({
  data: components.Customer$outboundSchema.optional(),
  created: z.number().int().optional(),
  eventType: EventType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerCreatedEventRequestBody$ {
  /** @deprecated use `CustomerCreatedEventRequestBody$inboundSchema` instead. */
  export const inboundSchema = CustomerCreatedEventRequestBody$inboundSchema;
  /** @deprecated use `CustomerCreatedEventRequestBody$outboundSchema` instead. */
  export const outboundSchema = CustomerCreatedEventRequestBody$outboundSchema;
  /** @deprecated use `CustomerCreatedEventRequestBody$Outbound` instead. */
  export type Outbound = CustomerCreatedEventRequestBody$Outbound;
}

export function customerCreatedEventRequestBodyToJSON(
  customerCreatedEventRequestBody: CustomerCreatedEventRequestBody,
): string {
  return JSON.stringify(
    CustomerCreatedEventRequestBody$outboundSchema.parse(
      customerCreatedEventRequestBody,
    ),
  );
}

export function customerCreatedEventRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CustomerCreatedEventRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerCreatedEventRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerCreatedEventRequestBody' from JSON`,
  );
}
