/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWebhookGlobals = {
  companyId?: string | undefined;
};

export type GetWebhookRequest = {
  webhookId: string;
};

/** @internal */
export const GetWebhookGlobals$inboundSchema: z.ZodType<
  GetWebhookGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string().optional(),
});

/** @internal */
export type GetWebhookGlobals$Outbound = {
  companyId?: string | undefined;
};

/** @internal */
export const GetWebhookGlobals$outboundSchema: z.ZodType<
  GetWebhookGlobals$Outbound,
  z.ZodTypeDef,
  GetWebhookGlobals
> = z.object({
  companyId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookGlobals$ {
  /** @deprecated use `GetWebhookGlobals$inboundSchema` instead. */
  export const inboundSchema = GetWebhookGlobals$inboundSchema;
  /** @deprecated use `GetWebhookGlobals$outboundSchema` instead. */
  export const outboundSchema = GetWebhookGlobals$outboundSchema;
  /** @deprecated use `GetWebhookGlobals$Outbound` instead. */
  export type Outbound = GetWebhookGlobals$Outbound;
}

export function getWebhookGlobalsToJSON(
  getWebhookGlobals: GetWebhookGlobals,
): string {
  return JSON.stringify(
    GetWebhookGlobals$outboundSchema.parse(getWebhookGlobals),
  );
}

export function getWebhookGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookGlobals' from JSON`,
  );
}

/** @internal */
export const GetWebhookRequest$inboundSchema: z.ZodType<
  GetWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "webhook_id": "webhookId",
  });
});

/** @internal */
export type GetWebhookRequest$Outbound = {
  webhook_id: string;
};

/** @internal */
export const GetWebhookRequest$outboundSchema: z.ZodType<
  GetWebhookRequest$Outbound,
  z.ZodTypeDef,
  GetWebhookRequest
> = z.object({
  webhookId: z.string(),
}).transform((v) => {
  return remap$(v, {
    webhookId: "webhook_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookRequest$ {
  /** @deprecated use `GetWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = GetWebhookRequest$inboundSchema;
  /** @deprecated use `GetWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = GetWebhookRequest$outboundSchema;
  /** @deprecated use `GetWebhookRequest$Outbound` instead. */
  export type Outbound = GetWebhookRequest$Outbound;
}

export function getWebhookRequestToJSON(
  getWebhookRequest: GetWebhookRequest,
): string {
  return JSON.stringify(
    GetWebhookRequest$outboundSchema.parse(getWebhookRequest),
  );
}

export function getWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookRequest' from JSON`,
  );
}
