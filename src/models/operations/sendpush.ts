/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SendPushGlobals = {
  companyId?: string | undefined;
};

export type SendPushRequestBody = {
  deviceTokens: Array<string>;
  title: string;
  body: string;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const SendPushGlobals$inboundSchema: z.ZodType<
  SendPushGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string().optional(),
});

/** @internal */
export type SendPushGlobals$Outbound = {
  companyId?: string | undefined;
};

/** @internal */
export const SendPushGlobals$outboundSchema: z.ZodType<
  SendPushGlobals$Outbound,
  z.ZodTypeDef,
  SendPushGlobals
> = z.object({
  companyId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendPushGlobals$ {
  /** @deprecated use `SendPushGlobals$inboundSchema` instead. */
  export const inboundSchema = SendPushGlobals$inboundSchema;
  /** @deprecated use `SendPushGlobals$outboundSchema` instead. */
  export const outboundSchema = SendPushGlobals$outboundSchema;
  /** @deprecated use `SendPushGlobals$Outbound` instead. */
  export type Outbound = SendPushGlobals$Outbound;
}

export function sendPushGlobalsToJSON(
  sendPushGlobals: SendPushGlobals,
): string {
  return JSON.stringify(SendPushGlobals$outboundSchema.parse(sendPushGlobals));
}

export function sendPushGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SendPushGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendPushGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendPushGlobals' from JSON`,
  );
}

/** @internal */
export const SendPushRequestBody$inboundSchema: z.ZodType<
  SendPushRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  device_tokens: z.array(z.string()),
  title: z.string(),
  body: z.string(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "device_tokens": "deviceTokens",
  });
});

/** @internal */
export type SendPushRequestBody$Outbound = {
  device_tokens: Array<string>;
  title: string;
  body: string;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const SendPushRequestBody$outboundSchema: z.ZodType<
  SendPushRequestBody$Outbound,
  z.ZodTypeDef,
  SendPushRequestBody
> = z.object({
  deviceTokens: z.array(z.string()),
  title: z.string(),
  body: z.string(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    deviceTokens: "device_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendPushRequestBody$ {
  /** @deprecated use `SendPushRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendPushRequestBody$inboundSchema;
  /** @deprecated use `SendPushRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendPushRequestBody$outboundSchema;
  /** @deprecated use `SendPushRequestBody$Outbound` instead. */
  export type Outbound = SendPushRequestBody$Outbound;
}

export function sendPushRequestBodyToJSON(
  sendPushRequestBody: SendPushRequestBody,
): string {
  return JSON.stringify(
    SendPushRequestBody$outboundSchema.parse(sendPushRequestBody),
  );
}

export function sendPushRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SendPushRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendPushRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendPushRequestBody' from JSON`,
  );
}
