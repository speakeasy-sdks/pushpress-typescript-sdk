/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAppInstallGlobals = {
  companyId?: string | undefined;
};

export type GetAppInstallRequest = {
  appId: string;
  installId: string;
};

/** @internal */
export const GetAppInstallGlobals$inboundSchema: z.ZodType<
  GetAppInstallGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string().optional(),
});

/** @internal */
export type GetAppInstallGlobals$Outbound = {
  companyId?: string | undefined;
};

/** @internal */
export const GetAppInstallGlobals$outboundSchema: z.ZodType<
  GetAppInstallGlobals$Outbound,
  z.ZodTypeDef,
  GetAppInstallGlobals
> = z.object({
  companyId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAppInstallGlobals$ {
  /** @deprecated use `GetAppInstallGlobals$inboundSchema` instead. */
  export const inboundSchema = GetAppInstallGlobals$inboundSchema;
  /** @deprecated use `GetAppInstallGlobals$outboundSchema` instead. */
  export const outboundSchema = GetAppInstallGlobals$outboundSchema;
  /** @deprecated use `GetAppInstallGlobals$Outbound` instead. */
  export type Outbound = GetAppInstallGlobals$Outbound;
}

export function getAppInstallGlobalsToJSON(
  getAppInstallGlobals: GetAppInstallGlobals,
): string {
  return JSON.stringify(
    GetAppInstallGlobals$outboundSchema.parse(getAppInstallGlobals),
  );
}

export function getAppInstallGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetAppInstallGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAppInstallGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAppInstallGlobals' from JSON`,
  );
}

/** @internal */
export const GetAppInstallRequest$inboundSchema: z.ZodType<
  GetAppInstallRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  app_id: z.string(),
  install_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "app_id": "appId",
    "install_id": "installId",
  });
});

/** @internal */
export type GetAppInstallRequest$Outbound = {
  app_id: string;
  install_id: string;
};

/** @internal */
export const GetAppInstallRequest$outboundSchema: z.ZodType<
  GetAppInstallRequest$Outbound,
  z.ZodTypeDef,
  GetAppInstallRequest
> = z.object({
  appId: z.string(),
  installId: z.string(),
}).transform((v) => {
  return remap$(v, {
    appId: "app_id",
    installId: "install_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAppInstallRequest$ {
  /** @deprecated use `GetAppInstallRequest$inboundSchema` instead. */
  export const inboundSchema = GetAppInstallRequest$inboundSchema;
  /** @deprecated use `GetAppInstallRequest$outboundSchema` instead. */
  export const outboundSchema = GetAppInstallRequest$outboundSchema;
  /** @deprecated use `GetAppInstallRequest$Outbound` instead. */
  export type Outbound = GetAppInstallRequest$Outbound;
}

export function getAppInstallRequestToJSON(
  getAppInstallRequest: GetAppInstallRequest,
): string {
  return JSON.stringify(
    GetAppInstallRequest$outboundSchema.parse(getAppInstallRequest),
  );
}

export function getAppInstallRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAppInstallRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAppInstallRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAppInstallRequest' from JSON`,
  );
}
