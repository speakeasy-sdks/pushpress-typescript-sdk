/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SendEmailGlobals = {
  companyId?: string | undefined;
};

export type SendEmailRequestBody = {
  to: string;
  subject: string;
  body: string;
  from: string;
  cc?: string | undefined;
  bcc?: string | undefined;
  replyTo?: string | undefined;
};

/** @internal */
export const SendEmailGlobals$inboundSchema: z.ZodType<
  SendEmailGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string().optional(),
});

/** @internal */
export type SendEmailGlobals$Outbound = {
  companyId?: string | undefined;
};

/** @internal */
export const SendEmailGlobals$outboundSchema: z.ZodType<
  SendEmailGlobals$Outbound,
  z.ZodTypeDef,
  SendEmailGlobals
> = z.object({
  companyId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEmailGlobals$ {
  /** @deprecated use `SendEmailGlobals$inboundSchema` instead. */
  export const inboundSchema = SendEmailGlobals$inboundSchema;
  /** @deprecated use `SendEmailGlobals$outboundSchema` instead. */
  export const outboundSchema = SendEmailGlobals$outboundSchema;
  /** @deprecated use `SendEmailGlobals$Outbound` instead. */
  export type Outbound = SendEmailGlobals$Outbound;
}

export function sendEmailGlobalsToJSON(
  sendEmailGlobals: SendEmailGlobals,
): string {
  return JSON.stringify(
    SendEmailGlobals$outboundSchema.parse(sendEmailGlobals),
  );
}

export function sendEmailGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SendEmailGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendEmailGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendEmailGlobals' from JSON`,
  );
}

/** @internal */
export const SendEmailRequestBody$inboundSchema: z.ZodType<
  SendEmailRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  to: z.string(),
  subject: z.string(),
  body: z.string(),
  from: z.string(),
  cc: z.string().optional(),
  bcc: z.string().optional(),
  replyTo: z.string().optional(),
});

/** @internal */
export type SendEmailRequestBody$Outbound = {
  to: string;
  subject: string;
  body: string;
  from: string;
  cc?: string | undefined;
  bcc?: string | undefined;
  replyTo?: string | undefined;
};

/** @internal */
export const SendEmailRequestBody$outboundSchema: z.ZodType<
  SendEmailRequestBody$Outbound,
  z.ZodTypeDef,
  SendEmailRequestBody
> = z.object({
  to: z.string(),
  subject: z.string(),
  body: z.string(),
  from: z.string(),
  cc: z.string().optional(),
  bcc: z.string().optional(),
  replyTo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendEmailRequestBody$ {
  /** @deprecated use `SendEmailRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendEmailRequestBody$inboundSchema;
  /** @deprecated use `SendEmailRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendEmailRequestBody$outboundSchema;
  /** @deprecated use `SendEmailRequestBody$Outbound` instead. */
  export type Outbound = SendEmailRequestBody$Outbound;
}

export function sendEmailRequestBodyToJSON(
  sendEmailRequestBody: SendEmailRequestBody,
): string {
  return JSON.stringify(
    SendEmailRequestBody$outboundSchema.parse(sendEmailRequestBody),
  );
}

export function sendEmailRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SendEmailRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendEmailRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendEmailRequestBody' from JSON`,
  );
}
