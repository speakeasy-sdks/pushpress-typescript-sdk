/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateWebhookGlobals = {
  companyId?: string | undefined;
};

export type CreateWebhookRequestBody = {
  /**
   * URL to send the event data to
   */
  url: string;
  /**
   * List of events the webhook is subscribed to
   */
  events: Array<string>;
  /**
   * companyId of the company to which the webhook belongs
   */
  company?: string | undefined;
};

/** @internal */
export const CreateWebhookGlobals$inboundSchema: z.ZodType<
  CreateWebhookGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyId: z.string().optional(),
});

/** @internal */
export type CreateWebhookGlobals$Outbound = {
  companyId?: string | undefined;
};

/** @internal */
export const CreateWebhookGlobals$outboundSchema: z.ZodType<
  CreateWebhookGlobals$Outbound,
  z.ZodTypeDef,
  CreateWebhookGlobals
> = z.object({
  companyId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookGlobals$ {
  /** @deprecated use `CreateWebhookGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookGlobals$inboundSchema;
  /** @deprecated use `CreateWebhookGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookGlobals$outboundSchema;
  /** @deprecated use `CreateWebhookGlobals$Outbound` instead. */
  export type Outbound = CreateWebhookGlobals$Outbound;
}

export function createWebhookGlobalsToJSON(
  createWebhookGlobals: CreateWebhookGlobals,
): string {
  return JSON.stringify(
    CreateWebhookGlobals$outboundSchema.parse(createWebhookGlobals),
  );
}

export function createWebhookGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookGlobals' from JSON`,
  );
}

/** @internal */
export const CreateWebhookRequestBody$inboundSchema: z.ZodType<
  CreateWebhookRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  events: z.array(z.string()),
  company: z.string().optional(),
});

/** @internal */
export type CreateWebhookRequestBody$Outbound = {
  url: string;
  events: Array<string>;
  company?: string | undefined;
};

/** @internal */
export const CreateWebhookRequestBody$outboundSchema: z.ZodType<
  CreateWebhookRequestBody$Outbound,
  z.ZodTypeDef,
  CreateWebhookRequestBody
> = z.object({
  url: z.string(),
  events: z.array(z.string()),
  company: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookRequestBody$ {
  /** @deprecated use `CreateWebhookRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookRequestBody$inboundSchema;
  /** @deprecated use `CreateWebhookRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookRequestBody$outboundSchema;
  /** @deprecated use `CreateWebhookRequestBody$Outbound` instead. */
  export type Outbound = CreateWebhookRequestBody$Outbound;
}

export function createWebhookRequestBodyToJSON(
  createWebhookRequestBody: CreateWebhookRequestBody,
): string {
  return JSON.stringify(
    CreateWebhookRequestBody$outboundSchema.parse(createWebhookRequestBody),
  );
}

export function createWebhookRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookRequestBody' from JSON`,
  );
}
